<?xml version="1.0" encoding="UTF-8"?>
<solver xmlns="https://www.optaplanner.org/xsd/solver" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="https://www.optaplanner.org/xsd/solver https://www.optaplanner.org/xsd/solver/solver.xsd">
    <!-- To slowly prove there are no bugs in this code -->
    <!--<environmentMode>FULL_ASSERT</environmentMode>-->
    <!-- To solve faster by saturating multiple CPU cores -->
    <!--<moveThreadCount>AUTO</moveThreadCount>-->

    <solutionClass>lv.lu.df.combopt.timeplanner.domain.AimSchedule</solutionClass>
    <entityClass>lv.lu.df.combopt.timeplanner.domain.Aim</entityClass>
    <entityClass>lv.lu.df.combopt.timeplanner.domain.Activity</entityClass>

    <scoreDirectorFactory>
        <!--<easyScoreCalculatorClass>lv.lu.df.combopt.timeplanner.score.AimScheduleEasyScoreCalculator</easyScoreCalculatorClass>-->
        <!--<easyScoreCalculatorClass>org.optaplanner.examples.nqueens.optional.score.NQueensMapBasedEasyScoreCalculator</easyScoreCalculatorClass>-->
        <constraintProviderClass>lv.lu.df.combopt.timeplanner.score.AimSchedulerConstraintProvider</constraintProviderClass>
        <!--<incrementalScoreCalculatorClass>org.optaplanner.examples.nqueens.optional.score.NQueensBasicIncrementalScoreCalculator</incrementalScoreCalculatorClass>-->
        <!--<incrementalScoreCalculatorClass>org.optaplanner.examples.nqueens.optional.score.NQueensAdvancedIncrementalScoreCalculator</incrementalScoreCalculatorClass>-->
        <!--<scoreDrl>org/optaplanner/examples/nqueens/optional/score/nQueensConstraints.drl</scoreDrl>-->
        <initializingScoreTrend>ONLY_DOWN</initializingScoreTrend>
        <!--<assertionScoreDirectorFactory>-->
        <!--<easyScoreCalculatorClass>org.optaplanner.examples.nqueens.optional.score.NQueensEasyScoreCalculator</easyScoreCalculatorClass>-->
        <!--</assertionScoreDirectorFactory>-->
    </scoreDirectorFactory>

    <termination>
        <terminationCompositionStyle>OR</terminationCompositionStyle>
        <unimprovedSecondsSpentLimit>5</unimprovedSecondsSpentLimit>
        <bestScoreLimit>0hard/0soft</bestScoreLimit>

    </termination>

    <constructionHeuristic>
        <constructionHeuristicType>FIRST_FIT</constructionHeuristicType>
        <!--<constructionHeuristicType>FIRST_FIT_DECREASING</constructionHeuristicType>-->
        <!--<constructionHeuristicType>FIRST_FIT</constructionHeuristicType>-->
    </constructionHeuristic>

    <localSearch>
        <!--<swapMoveSelector></swapMoveSelector>-->
    </localSearch>

    <!-- To scale out, replace <localSearch> with this configuration: -->
    <!--<localSearch>-->
    <!--<acceptor>-->
    <!--<entityTabuSize>11</entityTabuSize>-->
    <!--</acceptor>-->
    <!--<forager>-->
    <!--<acceptedCountLimit>2000</acceptedCountLimit>-->
    <!--<pickEarlyType>FIRST_BEST_SCORE_IMPROVING</pickEarlyType>-->
    <!--</forager>-->
    <!--</localSearch>-->

    <!-- To super scale out, replace <constructionHeuristic> and <localSearch> with this configuration: -->
    <!--<customPhase>-->
    <!--<customPhaseCommandClass>org.optaplanner.examples.nqueens.optional.solver.solution.CheatingNQueensPhaseCommand</customPhaseCommandClass>-->
    <!--</customPhase>-->
</solver>